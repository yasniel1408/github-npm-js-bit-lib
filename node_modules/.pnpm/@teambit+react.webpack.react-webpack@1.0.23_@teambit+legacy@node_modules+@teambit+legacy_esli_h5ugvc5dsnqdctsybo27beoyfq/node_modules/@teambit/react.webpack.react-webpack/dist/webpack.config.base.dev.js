"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.configBaseDevFactory = void 0;
const path_1 = require("path");
// import { ComponentID } from '@teambit/component-id';
// Make sure the bit-react-transformer is a dependency
// TODO: remove it once we can set policy from component to component then set it via the component.json
require("@teambit/react.babel.bit-react-transformer");
function configBaseDevFactory({ workspaceDir }) {
    return {
        module: {
            rules: [
                {
                    test: /\.js$/,
                    enforce: 'pre',
                    // limit loader to files in the current project,
                    // to skip any files linked from other projects (like Bit itself)
                    include: (0, path_1.join)(workspaceDir, 'node_modules'),
                    // only apply to packages with componentId in their package.json (ie. bit components)
                    descriptionData: { componentId: (value) => !!value },
                    use: [require.resolve('source-map-loader')],
                },
                {
                    test: /\.js$/,
                    // limit loader to files in the current project,
                    // to skip any files linked from other projects (like Bit itself)
                    include: (0, path_1.join)(workspaceDir, 'node_modules'),
                    // only apply to packages with componentId in their package.json (ie. bit components)
                    descriptionData: { _bit_local: value => !!value, type: "module" },
                    use: [
                        require.resolve('@pmmmwh/react-refresh-webpack-plugin/loader'),
                        {
                            loader: require.resolve('babel-loader'),
                            options: {
                                sourceType: 'unambiguous',
                                babelrc: false,
                                configFile: false,
                                plugins: [
                                    require.resolve('react-refresh/babel'),
                                ],
                                // turn off all optimizations (only slow down for node_modules)
                                compact: false,
                                minified: false,
                            },
                        },
                    ],
                },
                {
                    test: /\.js$/,
                    // limit loader to files in the current project,
                    // to skip any files linked from other projects (like Bit itself)
                    include: (0, path_1.join)(workspaceDir, 'node_modules'),
                    // only apply to packages with componentId in their package.json (ie. bit components)
                    // descriptionData: { _bit_local: value => !!value, type: "module" },
                    descriptionData: { componentId: (value) => !!value },
                    use: [
                        {
                            loader: require.resolve('babel-loader'),
                            options: {
                                sourceType: 'unambiguous',
                                babelrc: false,
                                configFile: false,
                                plugins: [
                                    // for component highlighting in preview.
                                    [
                                        require.resolve('@teambit/react.babel.bit-react-transformer'),
                                    ],
                                ],
                                // turn off all optimizations (only slow down for node_modules)
                                compact: false,
                                minified: false,
                            },
                        },
                    ],
                },
                // MDX support (move to the mdx aspect and extend from there)
                {
                    test: /\.mdx?$/,
                    // to skip any files linked from other projects (like Bit itself)
                    include: (0, path_1.join)(workspaceDir, 'node_modules'),
                    // only apply to packages with componentId in their package.json (ie. bit components)
                    // descriptionData: { componentId: (value) => !!value },
                    descriptionData: { _bit_local: value => !!value },
                    use: [
                        require.resolve('@pmmmwh/react-refresh-webpack-plugin/loader'),
                        {
                            loader: require.resolve('babel-loader'),
                            options: {
                                sourceType: 'unambiguous',
                                babelrc: false,
                                configFile: false,
                                presets: [
                                    require.resolve('@babel/preset-react'),
                                    require.resolve('@babel/preset-env'),
                                ],
                                plugins: [require.resolve('react-refresh/babel')],
                            },
                        },
                    ],
                },
                {
                    test: /\.mdx?$/,
                    // to skip any files linked from other projects (like Bit itself)
                    include: (0, path_1.join)(workspaceDir, 'node_modules'),
                    // only apply to packages with componentId in their package.json (ie. bit components)
                    descriptionData: { componentId: (value) => !!value },
                    use: [
                        {
                            loader: require.resolve('babel-loader'),
                            options: {
                                sourceType: 'unambiguous',
                                babelrc: false,
                                configFile: false,
                                presets: [
                                    require.resolve('@babel/preset-react'),
                                    require.resolve('@babel/preset-env'),
                                ],
                                plugins: [],
                            },
                        },
                        {
                            loader: require.resolve('@teambit/mdx.modules.mdx-loader'),
                        },
                    ],
                },
            ],
        },
        stats: 'minimal',
        infrastructureLogging: {
            level: 'error',
        },
        watchOptions: {
            aggregateTimeout: 600,
        },
    };
}
exports.configBaseDevFactory = configBaseDevFactory;
//# sourceMappingURL=webpack.config.base.dev.js.map
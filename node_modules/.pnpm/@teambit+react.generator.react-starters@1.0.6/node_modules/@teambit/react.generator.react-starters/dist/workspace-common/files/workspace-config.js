"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.workspaceConfig = void 0;
const config_1 = require("@teambit/config");
const comment_json_1 = require("comment-json");
const constants_1 = require("../constants");
function workspaceConfig({ name, defaultScope, aspectComponent }, extraConfig) {
    return __awaiter(this, void 0, void 0, function* () {
        const scope = defaultScope || constants_1.DEFAULT_SCOPE_NAME;
        const envId = aspectComponent.id.toStringWithoutVersion();
        /**
         * a ws that was generated by the react-env should use the forked env
         */
        const generatorEnv = envId === 'teambit.react/react-env' ? `${scope}/${constants_1.FORKED_ENV_NAME}` : envId;
        const configParsed = yield (0, config_1.getWorkspaceConfigTemplateParsed)();
        configParsed['teambit.workspace/workspace'].name = name;
        configParsed['teambit.workspace/workspace'].defaultScope = scope;
        configParsed["teambit.workspace/workspace"].resolveEnvsFromRoots = true;
        configParsed['teambit.dependencies/dependency-resolver'].packageManager =
            'teambit.dependencies/pnpm';
        configParsed['teambit.dependencies/dependency-resolver'].rootComponents =
            true;
        configParsed['teambit.dependencies/dependency-resolver'].policy = {
            dependencies: {
                '@teambit/dependencies.modules.packages-excluder': '^0.0.68',
                eslint: '^7.28.0',
            },
            peerDependencies: {},
        };
        configParsed['teambit.generator/generator'] = {
            envs: [generatorEnv],
        };
        delete configParsed['teambit.workspace/variants'];
        let configMerged = extraConfig
            ? (0, comment_json_1.assign)(configParsed, extraConfig)
            : configParsed;
        return (0, config_1.stringifyWorkspaceConfig)(configMerged);
    });
}
exports.workspaceConfig = workspaceConfig;
//# sourceMappingURL=workspace-config.js.map
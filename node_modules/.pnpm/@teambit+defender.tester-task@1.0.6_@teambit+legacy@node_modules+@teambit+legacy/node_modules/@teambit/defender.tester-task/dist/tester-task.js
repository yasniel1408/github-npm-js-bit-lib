"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TesterTask = exports.getArtifactDef = exports.getJUnitArtifactPath = void 0;
const builder_1 = require("@teambit/builder");
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = require("path");
const compiler_1 = require("@teambit/compiler");
const dev_files_1 = __importDefault(require("@teambit/dev-files"));
const component_1 = require("@teambit/component");
const tester_1 = require("@teambit/tester");
const detect_test_files_1 = require("./detect-test-files");
const junit_generator_1 = require("./junit-generator");
function getJUnitArtifactPath() {
    return (0, path_1.join)(builder_1.CAPSULE_ARTIFACTS_DIR, '__bit_junit.xml');
}
exports.getJUnitArtifactPath = getJUnitArtifactPath;
function getArtifactDef() {
    return [
        {
            name: 'junit',
            globPatterns: [getJUnitArtifactPath()],
            rootDir: builder_1.CAPSULE_ARTIFACTS_DIR,
        },
    ];
}
exports.getArtifactDef = getArtifactDef;
/**
 * tester build task. Allows to test components during component build.
 */
class TesterTask {
    constructor(aspectId, devFiles, name = 'TestComponents', description = 'test components', tester) {
        this.aspectId = aspectId;
        this.devFiles = devFiles;
        this.name = name;
        this.description = description;
        this.tester = tester;
        this.dependencies = [compiler_1.CompilerAspect.id];
    }
    execute(context) {
        return __awaiter(this, void 0, void 0, function* () {
            const components = context.capsuleNetwork.originalSeedersCapsules.getAllComponents();
            const tester = this.tester || context.env.getTester();
            const componentsSpecFiles = component_1.ComponentMap.as(components, (component) => (0, detect_test_files_1.detectTestFiles)(component, this.devFiles));
            const testCount = componentsSpecFiles
                .toArray()
                .reduce((acc, [, specs]) => acc + specs.length, 0);
            if (testCount === 0) {
                return {
                    artifacts: [],
                    componentsResults: [],
                };
            }
            const patternsWithCapsule = component_1.ComponentMap.as(components, (component) => {
                const componentSpecFiles = componentsSpecFiles.get(component);
                if (!componentSpecFiles)
                    throw new Error('capsule not found');
                const [, specs] = componentSpecFiles;
                const capsule = context.capsuleNetwork.graphCapsules.getCapsule(component.id);
                if (!capsule)
                    throw new Error('capsule not found');
                const compiler = context.env.getCompiler();
                if (!compiler) {
                    throw new Error(`compiler not found for ${component.id.toString()}`);
                }
                // @ts-ignore. not sure why ts complain that compiler might be undefined, when we check it above.
                const distFolder = compiler.getDistDir() || compiler.distDir;
                return {
                    componentDir: (0, path_1.join)(capsule.path, distFolder),
                    paths: specs.map((specFile) => {
                        const distPath = compiler.getDistPathBySrcPath(specFile.relative);
                        // TODO: fix spec type file need to capsule will return files with type AbstractVinyl
                        return { path: (0, path_1.join)(capsule.path, distPath), relative: distPath };
                    }),
                };
            });
            const specFilesWithCapsule = component_1.ComponentMap.as(components, (component) => {
                const patternEntry = patternsWithCapsule.get(component);
                // @ts-ignore
                const [, val] = patternEntry;
                return val.paths;
            });
            const testerContext = Object.assign(context, {
                release: true,
                specFiles: specFilesWithCapsule,
                rootPath: context.capsuleNetwork.capsulesRootDir,
                patterns: patternsWithCapsule,
            });
            // TODO: remove after fix AbstractVinyl on capsule
            // @ts-ignore
            const testsResults = yield tester.test(testerContext);
            // write junit files
            yield Promise.all(testsResults.components.map((compResult) => __awaiter(this, void 0, void 0, function* () {
                const junit = (0, junit_generator_1.testsResultsToJUnitFormat)([compResult]);
                const capsule = context.capsuleNetwork.graphCapsules.getCapsule(compResult.componentId);
                if (!capsule) {
                    throw new Error(`unable to find ${compResult.componentId.toString()} in capsules`);
                }
                yield fs_extra_1.default.outputFile((0, path_1.join)(capsule.path, getJUnitArtifactPath()), junit);
            })));
            return {
                artifacts: getArtifactDef(),
                componentsResults: testsResults.components.map((componentTests) => {
                    var _a;
                    const componentErrors = componentTests.errors;
                    const component = (_a = context.capsuleNetwork.graphCapsules.getCapsule(componentTests.componentId)) === null || _a === void 0 ? void 0 : _a.component;
                    if (!component) {
                        throw new Error(`unable to find ${componentTests.componentId.toString()} in capsules`);
                    }
                    return {
                        component,
                        metadata: { tests: componentTests.results },
                        errors: componentErrors,
                    };
                }),
            };
        });
    }
    static from(options) {
        const name = options.name || 'tester-task';
        const handler = (context) => {
            const devFiles = context.getAspect(dev_files_1.default.id);
            const tester = options.tester ? options.tester(context) : undefined;
            return new TesterTask(tester_1.TesterAspect.id, devFiles, options.name, options.description, tester);
        };
        return {
            name,
            handler
        };
    }
}
exports.TesterTask = TesterTask;
//# sourceMappingURL=tester-task.js.map
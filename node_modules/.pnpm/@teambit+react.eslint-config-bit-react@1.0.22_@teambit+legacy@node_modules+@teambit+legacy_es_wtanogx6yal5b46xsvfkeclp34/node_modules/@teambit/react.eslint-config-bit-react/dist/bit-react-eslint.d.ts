declare const _extends: string[];
export { _extends as extends };
export declare const plugins: string[];
export declare const settings: {
    'mdx/code-blocks': boolean;
    jest: {
        version: number;
    };
    react: {
        version: string;
    };
};
export declare const env: {
    'jest/globals': boolean;
    browser: boolean;
    mocha: boolean;
    node: boolean;
};
export declare const overrides: ({
    files: string[];
    extends: string[];
    parser: string;
    parserOptions: {
        warnOnUnsupportedTypeScriptVersion: boolean;
        ecmaVersion: number;
        sourceType: string;
        ecmaFeatures: {
            modules: boolean;
            jsx: boolean;
        };
        extraFileExtensions?: undefined;
        extensions?: undefined;
    };
    rules: {
        '@typescript-eslint/camelcase': string;
        'import/no-extraneous-dependencies': string;
        'import/prefer-default-export': string;
        'react/jsx-props-no-spreading': string;
        'react/no-array-index-key': string;
        'trailing-comma': string;
        '@typescript-eslint/comma-dangle': string;
        'object-curly-newline': string;
        'react/react-in-jsx-scope': string;
        'class-methods-use-this': string;
        'arrow-body-style': string;
        'prefer-arrow-callback': string;
        'no-underscore-dangle': string;
        '@typescript-eslint/no-empty-function': string;
    };
} | {
    rules: {
        'react/jsx-uses-vars': string;
        'react/jsx-uses-react': string;
        '@typescript-eslint/camelcase'?: undefined;
        'import/no-extraneous-dependencies'?: undefined;
        'import/prefer-default-export'?: undefined;
        'react/jsx-props-no-spreading'?: undefined;
        'react/no-array-index-key'?: undefined;
        'trailing-comma'?: undefined;
        '@typescript-eslint/comma-dangle'?: undefined;
        'object-curly-newline'?: undefined;
        'react/react-in-jsx-scope'?: undefined;
        'class-methods-use-this'?: undefined;
        'arrow-body-style'?: undefined;
        'prefer-arrow-callback'?: undefined;
        'no-underscore-dangle'?: undefined;
        '@typescript-eslint/no-empty-function'?: undefined;
    };
    parserOptions: {
        extraFileExtensions: string[];
        ecmaVersion: number;
        sourceType: string;
        ecmaFeatures: {
            modules: boolean;
            jsx: boolean;
        };
        extensions: string[];
        warnOnUnsupportedTypeScriptVersion?: undefined;
    };
    ignorePatterns?: string | string[];
    root?: boolean;
    $schema?: string;
    env?: {
        [name: string]: boolean;
    };
    extends: string | string[];
    globals?: {
        [name: string]: boolean | "readonly" | "readable" | "writable" | "writeable";
    };
    noInlineConfig?: boolean;
    overrides?: import("eslint").Linter.ConfigOverride<import("eslint").Linter.RulesRecord>[];
    parser?: string;
    plugins?: string[];
    processor?: string;
    reportUnusedDisableDirectives?: boolean;
    settings?: {
        [name: string]: any;
    };
    files: string[];
} | {
    ignorePatterns?: string | string[];
    root?: boolean;
    $schema?: string;
    env?: {
        [name: string]: boolean;
    };
    extends?: string | string[];
    globals?: {
        [name: string]: boolean | "readonly" | "readable" | "writable" | "writeable";
    };
    noInlineConfig?: boolean;
    overrides?: import("eslint").Linter.ConfigOverride<import("eslint").Linter.RulesRecord>[];
    parser?: string;
    parserOptions?: import("eslint").Linter.ParserOptions;
    plugins?: string[];
    processor?: string;
    reportUnusedDisableDirectives?: boolean;
    settings?: {
        [name: string]: any;
    };
    rules?: Partial<import("eslint").Linter.RulesRecord>;
    files: string;
})[];

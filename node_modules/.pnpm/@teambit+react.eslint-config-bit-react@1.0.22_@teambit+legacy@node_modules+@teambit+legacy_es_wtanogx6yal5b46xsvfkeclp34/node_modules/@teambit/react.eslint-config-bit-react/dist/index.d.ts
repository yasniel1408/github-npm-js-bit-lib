declare const _exports: {
    extends: string[];
    plugins: string[];
    settings: {
        'mdx/code-blocks': boolean;
        jest: {
            version: number;
        };
        react: {
            version: string;
        };
    };
    env: {
        'jest/globals': boolean;
        browser: boolean;
        mocha: boolean;
        node: boolean;
    };
    overrides: ({
        files: string[];
        extends: string[];
        parser: string;
        parserOptions: {
            warnOnUnsupportedTypeScriptVersion: boolean;
            ecmaVersion: number;
            sourceType: string;
            ecmaFeatures: {
                modules: boolean;
                jsx: boolean;
            };
        };
        rules: {
            '@typescript-eslint/camelcase': string;
            'import/no-extraneous-dependencies': string;
            'import/prefer-default-export': string;
            'react/jsx-props-no-spreading': string;
            'react/no-array-index-key': string;
            'trailing-comma': string;
            '@typescript-eslint/comma-dangle': string;
            'object-curly-newline': string;
            'react/react-in-jsx-scope': string;
            'class-methods-use-this': string;
            'arrow-body-style': string;
            'prefer-arrow-callback': string;
            'no-underscore-dangle': string;
            '@typescript-eslint/no-empty-function': string;
        };
    } | {
        rules: {
            'react/jsx-uses-vars': string;
            'react/jsx-uses-react': string;
        };
        parserOptions: {
            extraFileExtensions: string[];
            ecmaVersion: number;
            sourceType: string;
            ecmaFeatures: {
                modules: boolean;
                jsx: boolean;
            };
            extensions: string[];
        };
        ignorePatterns?: string | string[];
        root?: boolean;
        $schema?: string;
        env?: {
            [name: string]: boolean;
        };
        extends: string | string[];
        globals?: {
            [name: string]: boolean | "readonly" | "readable" | "writable" | "writeable";
        };
        noInlineConfig?: boolean;
        overrides?: import("eslint").Linter.ConfigOverride<import("eslint").Linter.RulesRecord>[];
        parser?: string;
        plugins?: string[];
        processor?: string;
        reportUnusedDisableDirectives?: boolean;
        settings?: {
            [name: string]: any;
        };
        files: string[];
    } | {
        ignorePatterns?: string | string[];
        root?: boolean;
        $schema?: string;
        env?: {
            [name: string]: boolean;
        };
        extends?: string | string[];
        globals?: {
            [name: string]: boolean | "readonly" | "readable" | "writable" | "writeable";
        };
        noInlineConfig?: boolean;
        overrides?: import("eslint").Linter.ConfigOverride<import("eslint").Linter.RulesRecord>[];
        parser?: string;
        parserOptions?: import("eslint").Linter.ParserOptions;
        plugins?: string[];
        processor?: string;
        reportUnusedDisableDirectives?: boolean;
        settings?: {
            [name: string]: any;
        };
        rules?: Partial<import("eslint").Linter.RulesRecord>;
        files: string;
    })[];
};
export = _exports;

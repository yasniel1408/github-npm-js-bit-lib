"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.remark = void 0;
const tslib_1 = require("tslib");
const path_1 = tslib_1.__importDefault(require("path"));
const eslint_mdx_1 = require("eslint-mdx");
const synckit_1 = require("synckit");
const vfile_1 = tslib_1.__importDefault(require("vfile"));
const helpers_1 = require("./helpers");
const processSync = synckit_1.createSyncFn(require.resolve('../worker'));
const brokenCache = new WeakMap();
exports.remark = {
    meta: {
        type: 'layout',
        docs: {
            description: 'Linter integration with remark plugins',
            category: 'Stylistic Issues',
            recommended: true,
        },
        fixable: 'code',
    },
    create(context) {
        const filename = context.getFilename();
        const extname = path_1.default.extname(filename);
        const sourceCode = context.getSourceCode();
        const options = context.parserOptions;
        const isMdx = eslint_mdx_1.DEFAULT_EXTENSIONS.concat(options.extensions || []).includes(extname);
        const isMarkdown = eslint_mdx_1.MARKDOWN_EXTENSIONS.concat(options.markdownExtensions || []).includes(extname);
        return {
            // eslint-disable-next-line sonarjs/cognitive-complexity
            Program(node) {
                /* istanbul ignore if */
                if (!isMdx && !isMarkdown) {
                    return;
                }
                const physicalFilename = helpers_1.getPhysicalFilename(filename);
                const sourceText = sourceCode.getText(node);
                const remarkProcessor = helpers_1.getRemarkProcessor(physicalFilename, isMdx);
                const fileOptions = {
                    path: filename,
                    contents: sourceText,
                };
                const file = vfile_1.default(fileOptions);
                let fixedText;
                let broken = brokenCache.get(remarkProcessor);
                if (broken) {
                    const { messages, content } = processSync(fileOptions, physicalFilename, isMdx);
                    file.messages = messages;
                    fixedText = content;
                }
                else {
                    try {
                        remarkProcessor.processSync(file);
                    }
                    catch (err) {
                        /* istanbul ignore else */
                        if (err.message ===
                            '`processSync` finished async. Use `process` instead') {
                            brokenCache.set(remarkProcessor, (broken = true));
                            const { messages, content } = processSync(fileOptions, physicalFilename, isMdx);
                            file.messages = messages;
                            fixedText = content;
                        }
                        else if (!file.messages.includes(err)) {
                            file.message(err).fatal = true;
                        }
                    }
                }
                if (!broken) {
                    fixedText = file.toString();
                }
                fixedText =
                    filename === physicalFilename || sourceText.endsWith('\n')
                        ? fixedText
                        : fixedText.slice(0, -1);
                let fixed = 0;
                for (const { source, reason, ruleId, fatal, location: { start, end }, } of file.messages) {
                    // https://github.com/remarkjs/remark-lint/issues/65#issuecomment-220800231
                    /* istanbul ignore next */
                    const severity = fatal ? 2 : fatal == null ? 0 : 1;
                    /* istanbul ignore if */
                    if (!severity) {
                        // should never happen, just for robustness
                        continue;
                    }
                    const message = {
                        reason,
                        source,
                        ruleId,
                        severity,
                    };
                    context.report({
                        // related to https://github.com/eslint/eslint/issues/14198
                        message: JSON.stringify(message),
                        loc: {
                            // ! eslint ast column is 0-indexed, but unified is 1-indexed
                            start: Object.assign(Object.assign({}, start), { column: start.column - 1 }),
                            end: Object.assign(Object.assign({}, end), { column: end.column - 1 }),
                        },
                        node,
                        fix: fixedText === sourceText
                            ? null
                            : () => fixed++
                                ? null
                                : {
                                    range: [0, sourceText.length],
                                    text: fixedText,
                                },
                    });
                }
            },
        };
    },
};
//# sourceMappingURL=remark.js.map
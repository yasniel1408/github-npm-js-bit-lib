"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.themeDocsFile = void 0;
function themeDocsFile(context) {
    return {
        relativePath: `${context.name}.docs.mdx`,
        content: `---
description: A theme defining the ${context.namePascalCase} design language and design tokens.
labels: ['react', 'design', 'theme']
---

A theme component for using the ${context.namePascalCase} Design Language and tokens.

## Get started

To use the theme in your app, install the theme and apply it on your component tree.
Themes are usually applied on the root of your component tree.

\`\`\`tsx
export function MyApp() {
  return (
    <${context.namePascalCase}>
      <Homepage />
    </${context.namePascalCase}>
  );
}
\`\`\`

## Compose the theme

You can compose your theme to create specific variations such as Dark or Light themes, overriding some or all of its properties. 
To compose your theme, create a new component and use the theme as following:

\`\`\`tsx
const myTokenOverrides: WallyThemeSchema = {
  backgroundColor: 'black'
};

export function MyApp() {
  return (
    <${context.namePascalCase} overrides={myTokenOverrides}>
      <Homepage />
    </${context.namePascalCase}>
  );
}
\`\`\`
`
    };
}
exports.themeDocsFile = themeDocsFile;
//# sourceMappingURL=docs-file.js.map
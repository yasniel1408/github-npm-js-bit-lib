"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isSnap = exports.isTag = exports.isHash = exports.HASH_SIZE = void 0;
const semver_1 = __importDefault(require("semver"));
const exceptions_1 = require("./exceptions");
const version_1 = require("./version");
exports.HASH_SIZE = 40;
function isLatest(versionStr) {
    return versionStr === version_1.LATEST_VERSION;
}
function isSemverValid(versionStr) {
    return semver_1.default.valid(versionStr);
}
function returnSemver(versionStr) {
    return new version_1.Version(versionStr, false);
}
function returnLatest() {
    return new version_1.Version(null, true);
}
function returnSnap(hash) {
    return new version_1.Version(hash, false);
}
function isHash(str) {
    return typeof str === 'string' && str.length === exports.HASH_SIZE && !semver_1.default.valid(str);
}
exports.isHash = isHash;
/**
 * a component version can be a tag (semver) or a snap (hash)
 */
function isTag(str) {
    return !isHash(str);
}
exports.isTag = isTag;
/**
 * a component version can be a tag (semver) or a snap (hash)
 */
function isSnap(str) {
    return isHash(str);
}
exports.isSnap = isSnap;
function versionParser(versionStr) {
    if (!versionStr)
        return returnLatest();
    if (isLatest(versionStr))
        return returnLatest();
    if (isSemverValid(versionStr))
        return returnSemver(versionStr);
    if (isHash(versionStr))
        return returnSnap(versionStr);
    throw new exceptions_1.InvalidVersion(versionStr.toString());
}
exports.default = versionParser;
//# sourceMappingURL=version-parser.js.map
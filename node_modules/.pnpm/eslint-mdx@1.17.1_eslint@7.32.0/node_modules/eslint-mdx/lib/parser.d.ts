import type { AST, Linter } from 'eslint';
import type { Node, Parent, ParserOptions } from './types';
export declare const AST_PROPS: readonly ["body", "comments", "tokens"];
export declare const ES_NODE_TYPES: readonly string[];
export declare const LOC_ERROR_PROPERTIES: readonly ["column", "lineNumber"];
export declare const DEFAULT_EXTENSIONS: readonly string[];
export declare const MARKDOWN_EXTENSIONS: readonly string[];
export declare const PLACEHOLDER_FILE_PATH = "__placeholder__.mdx";
export declare const DEFAULT_PARSER_OPTIONS: ParserOptions;
export declare class Parser {
    constructor();
    normalizeJsxNode(node: Node, parent?: Parent, options?: ParserOptions): Node<string> | Node<string>[];
    parse(code: string, options: ParserOptions): AST.Program;
    parseForESLint(code: string, options: ParserOptions): Linter.ESLintParseResult;
}
export declare const parser: Parser;
export declare const parse: (code: string, options: ParserOptions) => AST.Program, parseForESLint: (code: string, options: ParserOptions) => Linter.ESLintParseResult;

/// <reference path="../typings.d.ts" />
import type { Position as ESPosition, SourceLocation } from 'estree';
import type { Point, Position } from 'unist';
import type { Arrayable, JsxNode, ParserFn, ParserOptions } from './types';
export declare const FALLBACK_PARSERS: readonly ["@typescript-eslint/parser", "@babel/eslint-parser", "babel-eslint", "espree"];
export declare const JSX_TYPES: string[];
export declare const isJsxNode: (node: {
    type: string;
}) => node is JsxNode;
export declare const normalizeParser: (parser?: ParserOptions['parser']) => ParserFn[];
export interface BaseNode {
    type: string;
    loc: SourceLocation;
    range: [number, number];
    start?: number;
    end?: number;
}
export declare const normalizePosition: (loc: Position) => Omit<BaseNode, 'type'>;
export declare const hasProperties: <T, P extends keyof T = keyof T>(obj: unknown, properties: Arrayable<P>) => obj is T;
export declare const getPositionAt: (code: string, offset: number) => ESPosition;
export declare const restoreNodeLocation: <T>(node: T, point: Point) => T;
export declare const arrayify: <T, R = T extends (infer S)[] ? S : T>(...args: T[]) => R[];
export declare const first: <T>(items: T[] | readonly T[]) => T;
export declare const last: <T>(items: T[] | readonly T[]) => T;

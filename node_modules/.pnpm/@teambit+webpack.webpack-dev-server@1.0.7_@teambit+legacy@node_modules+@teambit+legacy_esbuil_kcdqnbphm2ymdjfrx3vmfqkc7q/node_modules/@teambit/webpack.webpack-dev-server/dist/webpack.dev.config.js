"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.configFactory = void 0;
const path_1 = __importDefault(require("path"));
const webpack_1 = __importDefault(require("webpack"));
const html_webpack_plugin_1 = __importDefault(require("html-webpack-plugin"));
const errorOverlayMiddleware_1 = __importDefault(require("react-dev-utils/errorOverlayMiddleware"));
const evalSourceMapMiddleware_1 = __importDefault(require("react-dev-utils/evalSourceMapMiddleware"));
const noopServiceWorkerMiddleware_1 = __importDefault(require("react-dev-utils/noopServiceWorkerMiddleware"));
const redirectServedPathMiddleware_1 = __importDefault(require("react-dev-utils/redirectServedPathMiddleware"));
const getPublicUrlOrPath_1 = __importDefault(require("react-dev-utils/getPublicUrlOrPath"));
const webpack_webpack_bundler_1 = require("@teambit/webpack.webpack-bundler");
const utils_1 = require("@teambit/legacy/dist/utils");
const webpack_2 = require("@teambit/webpack");
const publicUrlOrPath = (0, getPublicUrlOrPath_1.default)(process.env.NODE_ENV === 'development', '/', '/public');
function configFactory(devServerID, workspaceDir, entryFiles, publicRoot, publicPath, pubsub, title, favicon) {
    const resolveWorkspacePath = (relativePath) => path_1.default.resolve(workspaceDir, relativePath);
    // Required for babel-preset-react-app
    process.env.NODE_ENV = 'development';
    const publicDirectory = `${publicRoot}/${publicPath}`;
    return {
        // Environment mode
        mode: 'development',
        devtool: 'eval-cheap-module-source-map',
        // Entry point of app
        entry: entryFiles.map((filePath) => resolveWorkspacePath(filePath)),
        output: {
            // Development filename output
            filename: 'static/js/[name].bundle.js',
            pathinfo: true,
            path: resolveWorkspacePath(publicDirectory),
            // publicPath: resolveWorkspacePath(publicDirectory),
            chunkFilename: 'static/js/[name].chunk.js',
            // point sourcemap entries to original disk locations (format as URL on windows)
            devtoolModuleFilenameTemplate: (info) => (0, utils_1.pathNormalizeToLinux)(path_1.default.resolve(info.absoluteResourcePath)),
            // this defaults to 'window', but by setting it to 'this' then
            // module chunks which are built will work in web workers as well.
            // Commented out to use the default (self) as according to tobias with webpack5 self is working with workers as well
            // globalObject: 'this',
        },
        infrastructureLogging: {
            level: 'error',
        },
        stats: {
            errorDetails: true,
        },
        devServer: {
            allowedHosts: 'all',
            static: [
                {
                    directory: resolveWorkspacePath(publicDirectory),
                    staticOptions: {},
                    // Don't be confused with `dev.publicPath`, it is `publicPath` for static directory
                    // Can be:
                    // publicPath: ['/static-public-path-one/', '/static-public-path-two/'],
                    publicPath: publicDirectory,
                    // Can be:
                    // serveIndex: {} (options for the `serveIndex` option you can find https://github.com/expressjs/serve-index)
                    serveIndex: true,
                    // Can be:
                    // watch: {} (options for the `watch` option you can find https://github.com/paulmillr/chokidar)
                    watch: true,
                },
            ],
            // Enable compression
            compress: true,
            // Enable hot reloading
            hot: true,
            historyApiFallback: {
                disableDotRule: true,
                index: '/index.html',
            },
            client: {
                overlay: false,
            },
            setupMiddlewares: (middlewares, devServer) => {
                if (!devServer) {
                    throw new Error("webpack-dev-server is not defined");
                }
                // Keep `evalSourceMapMiddleware` and `errorOverlayMiddleware`
                // middlewares before `redirectServedPath` otherwise will not have any effect
                // This lets us fetch source contents from webpack for the error overlay
                middlewares.push((0, evalSourceMapMiddleware_1.default)(devServer), 
                // This lets us open files from the runtime error overlay.
                (0, errorOverlayMiddleware_1.default)(), 
                // Redirect to `PUBLIC_URL` or `homepage` from `package.json` if url not match
                (0, redirectServedPathMiddleware_1.default)(publicUrlOrPath), 
                // This service worker file is effectively a 'no-op' that will reset any
                // previous service worker registered for the same host:port combination.
                // We do this in development to avoid hitting the production cache if
                // it used the same host and port.
                // https://github.com/facebook/create-react-app/issues/2272#issuecomment-302832432
                (0, noopServiceWorkerMiddleware_1.default)(publicUrlOrPath));
                return middlewares;
            },
            devMiddleware: {
                // forward static files
                publicPath: path_1.default.join('/', publicRoot),
            },
        },
        resolve: {
            // TODO - check - we shoult not need both fallbacks and alias and provider plugin
            alias: webpack_webpack_bundler_1.fallbacksAliases,
            fallback: webpack_webpack_bundler_1.fallbacks,
        },
        plugins: [
            new html_webpack_plugin_1.default({
                templateContent: (0, webpack_webpack_bundler_1.html)(title || 'Component preview'),
                filename: 'index.html',
                favicon,
            }),
            new webpack_1.default.ProvidePlugin(webpack_webpack_bundler_1.fallbacksProvidePluginConfig),
            new webpack_2.WebpackBitReporterPlugin({
                options: { pubsub, devServerID },
            }),
        ],
        watchOptions: {
            poll: true,
        },
    };
}
exports.configFactory = configFactory;
//# sourceMappingURL=webpack.dev.config.js.map
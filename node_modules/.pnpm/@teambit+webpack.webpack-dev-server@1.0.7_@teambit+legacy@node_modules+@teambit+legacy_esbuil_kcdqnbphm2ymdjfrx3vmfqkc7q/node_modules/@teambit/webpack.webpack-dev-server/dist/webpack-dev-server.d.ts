/// <reference types="node" />
import type { DevServer } from '@teambit/bundler';
import type { Server } from 'http';
import type { Logger } from '@teambit/logger';
import type { Workspace } from '@teambit/workspace';
import type { PubsubMain } from '@teambit/pubsub';
import { EnvContext } from '@teambit/envs';
import { WebpackDevServerOptions } from './webpack-dev-server-options';
import { WebpackConfigWithDevServer } from './webpack-config-with-dev-server';
export declare type DevServerAppContext = {
    logger: Logger;
    workspacePath: Workspace['path'];
    pubsub: PubsubMain;
};
declare type WebpackDevServerAspectsContext = {
    logger: Logger;
    workspacePath: string;
    pubsub: PubsubMain;
};
export declare class WebpackDevServer implements DevServer {
    private config;
    private webpackModulePath;
    private webpackDevServerModulePath;
    private readonly webpack;
    private readonly WsDevServer;
    constructor(config: WebpackConfigWithDevServer, webpackModulePath?: string, webpackDevServerModulePath?: string);
    private getCompiler;
    version(): string;
    id: string;
    displayName: string;
    displayConfig(): string;
    hash(): string;
    listen(port: number): Promise<Server>;
    private addSignalListener;
    static from(options: WebpackDevServerOptions): (context: EnvContext) => WebpackDevServer;
    static create(options: WebpackDevServerOptions, aspectContext: WebpackDevServerAspectsContext): WebpackDevServer;
}
export {};

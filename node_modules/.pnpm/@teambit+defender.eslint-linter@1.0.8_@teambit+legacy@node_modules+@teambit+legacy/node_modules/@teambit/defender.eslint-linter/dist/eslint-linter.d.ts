import { Linter, LinterContext, LintResults } from '@teambit/linter';
import { ESLint as ESLintLib } from 'eslint';
import { Logger } from '@teambit/logger';
import { EnvHandler } from '@teambit/envs';
import { BuildContext } from '@teambit/builder';
import { ESLintOptions } from './eslint-linter-options';
export declare class ESLintLinter implements Linter {
    readonly id: string;
    private logger;
    private options;
    private rawEslintConfig;
    private rawTsConfig;
    /**
     * reference to the eslint module.
     */
    private ESLint?;
    constructor(id: string, logger: Logger, options: ESLintOptions, rawEslintConfig: ESLintLib.Options, rawTsConfig: Record<string, any>, 
    /**
     * reference to the eslint module.
     */
    ESLint?: any);
    displayName: string;
    displayConfig(): string;
    lint(context: LinterContext, buildContext?: BuildContext): Promise<LintResults>;
    private getFilesPaths;
    private createTempTsConfigFile;
    private computeComponentResultsWithTotals;
    private computeManyComponentsTotals;
    /**
     * Create the eslint instance by options that was already merged with context
     * @param options
     * @param ESLintModule
     * @returns
     */
    private createEslint;
    version(): any;
    static from(options: ESLintOptions): EnvHandler<Linter>;
}

import { ESLint as ESLintLib } from 'eslint';
import { ExecutionContext } from '@teambit/envs';
import type { ConfigWriterEntry, EnvMapValue, ExtendingConfigFile, ConfigFile, GenerateExtendingConfigFilesArgs, ConfigWriterHandler } from '@teambit/workspace-config-files';
import { Logger } from '@teambit/logger';
import { ESLintOptions } from './eslint-linter-options';
export declare type EslintConfigWriterOptions = Pick<ESLintOptions, 'name' | 'configPath' | 'config' | 'tsconfig' | 'compilerOptions'>;
export declare class EslintConfigWriter implements ConfigWriterEntry {
    readonly name: string;
    private eslintConfig;
    private logger;
    private tsconfig?;
    id: string;
    patterns: string[];
    constructor(name: string, eslintConfig: ESLintLib.Options, logger: Logger, tsconfig?: Record<string, any>);
    calcConfigFiles(_executionContext: ExecutionContext, envMapValue: EnvMapValue, configsRootDir: string): ConfigFile[] | undefined;
    mergeConfigFiles?(configFile: ConfigFile, configFile2: ConfigFile): string;
    generateExtendingFile(args: GenerateExtendingConfigFilesArgs): ExtendingConfigFile | undefined;
    isBitGenerated(filePath: string): boolean;
    static from(options: EslintConfigWriterOptions): ConfigWriterHandler;
    static create(options: EslintConfigWriterOptions, logger: Logger): EslintConfigWriter;
}

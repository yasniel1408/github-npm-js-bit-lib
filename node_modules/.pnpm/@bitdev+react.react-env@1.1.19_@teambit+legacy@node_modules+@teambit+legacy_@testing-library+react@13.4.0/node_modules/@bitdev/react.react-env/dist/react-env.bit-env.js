"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ReactEnv = void 0;
function _findRoot() {
  const data = _interopRequireDefault(require("find-root"));
  _findRoot = function () {
    return data;
  };
  return data;
}
function _vite() {
  const data = require("@teambit/vite.vitest-tester");
  _vite = function () {
    return data;
  };
  return data;
}
function _generator() {
  const data = require("@teambit/generator");
  _generator = function () {
    return data;
  };
  return data;
}
function _reactGenerators() {
  const data = require("@bitdev/react.generators.react-templates");
  _reactGenerators = function () {
    return data;
  };
  return data;
}
function _reactGenerator() {
  const data = require("@teambit/react.generator.react-starters");
  _reactGenerator = function () {
    return data;
  };
  return data;
}
function _typescript() {
  const data = require("@teambit/typescript");
  _typescript = function () {
    return data;
  };
  return data;
}
function _preview() {
  const data = require("@teambit/preview.react-preview");
  _preview = function () {
    return data;
  };
  return data;
}
function _typescript2() {
  const data = require("@teambit/typescript.typescript-compiler");
  _typescript2 = function () {
    return data;
  };
  return data;
}
function _defender() {
  const data = require("@teambit/defender.eslint-linter");
  _defender = function () {
    return data;
  };
  return data;
}
function _eslint() {
  const data = require("eslint");
  _eslint = function () {
    return data;
  };
  return data;
}
function _defender2() {
  const data = require("@teambit/defender.prettier-formatter");
  _defender2 = function () {
    return data;
  };
  return data;
}
function _typescript3() {
  const data = _interopRequireDefault(require("typescript"));
  _typescript3 = function () {
    return data;
  };
  return data;
}
function _builder() {
  const data = require("@teambit/builder");
  _builder = function () {
    return data;
  };
  return data;
}
function _workspaceConfigFiles() {
  const data = require("@teambit/workspace-config-files");
  _workspaceConfigFiles = function () {
    return data;
  };
  return data;
}
function _pkg() {
  const data = require("@teambit/pkg");
  _pkg = function () {
    return data;
  };
  return data;
}
function _toolboxPerformance() {
  const data = require("@teambit/toolbox.performance.v8-cache");
  _toolboxPerformance = function () {
    return data;
  };
  return data;
}
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } // import { JestTask, JestTester } from '@teambit/defender.jest-tester';
// import { createReactEsbuildType } from '@bitdev/react.app-types.react-esbuild';
// import { ReactAppType } from '@teambit/react.apps.react-app-types';
// import { ViteReactType } from '@bitdev/react.app-types.vite-react';
// import { ReactSsrType } from '@bitdev/react.app-types.react-ssr';
// import { ReactAppType } from '@teambit/react.apps.react-app-types';
// import { AppTypeList } from '@teambit/application';
// Disable v8-caching because it breaks ESM loaders
_toolboxPerformance().NativeCompileCache.uninstall();
// import webpackTransformer from './config/webpack.config';

class ReactEnv {
  constructor() {
    /**
     * name of the environment. used for friendly mentions across bit.
     */
    _defineProperty(this, "name", 'react');
    /**
     * icon for the env. use this to build a more friendly env.
     * uses react by default.
     */
    _defineProperty(this, "icon", 'https://static.bit.dev/extensions-icons/react.svg');
    _defineProperty(this, "tsconfigPath", require.resolve('./config/tsconfig.json'));
    _defineProperty(this, "tsTypesPath", './types');
    _defineProperty(this, "jestConfigPath", require.resolve('./config/jest.config'));
    _defineProperty(this, "eslintConfigPath", require.resolve('./config/eslintrc.js'));
    _defineProperty(this, "eslintExtensions", ['.ts', '.tsx', '.js', '.jsx', '.mjs']);
    _defineProperty(this, "prettierConfigPath", require.resolve('./config/prettier.config.js'));
    _defineProperty(this, "prettierExtensions", ['.js', '.jsx', '.ts', '.tsx', '.mjs', '.cjs', '.json', '.css', '.scss', '.md', '.mdx', '.html', '.yml', '.yaml']);
    _defineProperty(this, "previewMounter", require.resolve('./preview/mounter'));
    _defineProperty(this, "previewDocsTemplate", require.resolve('./preview/docs'));
    /**
     * Default npm ignore paths.
     * Will ignore the "artifacts" directory by default.
     */
    _defineProperty(this, "npmIgnore", [`${_builder().CAPSULE_ARTIFACTS_DIR}/`, '.vitest']);
    /**
     * Default package.json modifications.
     */
    _defineProperty(this, "packageJson", {
      type: 'module',
      main: 'dist/{main}.js',
      types: '{main}.ts'
    });
  }
  /**
   * create an instance of a Bit Component Compiler.
   * Learn more: https://bit.dev/reference/compiling/set-up-compiler
   */
  compiler() {
    return _typescript2().TypescriptCompiler.from({
      tsconfig: this.tsconfigPath,
      types: this.types,
      typescript: _typescript3().default
    });
  }

  /**
   * create an instance of the Bit Tester plugin.
   * learn more: https://bit.dev/reference/testing/set-up-tester
   */
  tester() {
    return _vite().VitestTester.from({
      config: require.resolve('./config/vitest.config.mjs')
    });
    // return JestTester.from({
    //   // jest: require.resolve('jest'),
    //   config: this.jestConfigPath,
    // });
  }

  /**
   * create an instance for Bit Preview.
   */
  preview() {
    return _preview().ReactPreview.from({
      /**
       * override the default docs template for components.
       */
      // docsTemplate: this.previewDocsTemplate,
      /**
       * mounters are used to mount components to DOM
       * during preview. use them for wrapping your components
       * with routing, theming, data fetching or other types
       * of providers.
       */
      mounter: this.previewMounter

      /**
       * peer dependencies to include in your preview.
       * this ensures a single instance exist in preview.
       */
      // hostDependencies: [
      //   '@my-org/my-theme'
      //   'react-router',
      //   'react-router-dom',
      //   ''
      // ],
      // transformers: [webpackTransformer],
      // webpackModulePath: require.resolve("webpack"),
      // webpackDevServerModulePath: require.resolve("webpack-dev-server")
    });
  }

  /**
   * returns an instance of the default TypeScript extractor.
   * used by default for type inference for both JS and TS.
   */
  schemaExtractor() {
    return _typescript().TypeScriptExtractor.from({
      tsconfig: this.tsconfigPath
    });
  }

  /**
   * add a Bit Linter plugin.
   * learn more: https://bit.dev/reference/testing/set-up-tester
   */
  linter() {
    return _defender().ESLintLinter.from({
      tsconfig: this.tsconfigPath,
      eslint: _eslint().ESLint,
      configPath: this.eslintConfigPath,
      // resolve all plugins from the react environment.
      pluginsPath: __dirname,
      extensions: this.eslintExtensions
    });
  }

  /**
   * create a formatter instance.
   * learn more: https://bit.dev/reference/formatting/set-up-formatter
   */
  formatter() {
    return _defender2().PrettierFormatter.from({
      configPath: this.prettierConfigPath
    });
  }

  /**
   * Add your build pipeline.
   * learn more: https://bit.dev/docs/react-env/build-pipelines
   */
  build() {
    return _builder().Pipeline.from([_typescript2().TypescriptTask.from({
      tsconfig: this.tsconfigPath,
      types: this.types,
      typescript: _typescript3().default
    }), _defender().EslintTask.from({
      tsconfig: this.tsconfigPath,
      eslint: _eslint().ESLint,
      configPath: this.eslintConfigPath,
      // resolve all plugins from the react environment.
      pluginsPath: __dirname,
      extensions: this.eslintExtensions
    }), _vite().VitestTask.from({
      config: require.resolve('./config/vitest.config.mjs')
    })
    // JestTask.from({
    //   config: this.jestConfigPath,
    // }),
    ]);
  }

  /**
   * add build tasks to execute upon [snap](https://bit.dev/docs/snaps).
   * use the snap pipeline for staging and test deployments
   */
  snap() {
    return _builder().Pipeline.from([]);
  }

  /**
   * add build tasks to execute upon [tag](https://bit.dev/docs/tags).
   * use the tag pipeline for deployments, or other tasks required for
   * publishing a semantic version for a component.
   */
  tag() {
    return _builder().Pipeline.from([]);
  }
  workspaceConfig() {
    return _workspaceConfigFiles().ConfigWriterList.from([_typescript2().TypescriptConfigWriter.from({
      tsconfig: this.tsconfigPath,
      types: this.types
    }), _defender().EslintConfigWriter.from({
      configPath: this.eslintConfigPath,
      tsconfig: this.tsconfigPath
    }), _defender2().PrettierConfigWriter.from({
      configPath: this.prettierConfigPath
    })]);
  }

  /**
   * a list of starters for new projects. this helps create a quick and
   * standardized
   */
  starters() {
    return _generator().StarterList.from([_reactGenerator().ReactWorkspaceStarter.from()]);
  }

  /**
   * set a list of component templates to use across your
   * workspaces. new workspaces would be set to include
   * your envs by default.
   */
  generators() {
    return _generator().TemplateList.from([_reactGenerators().ReactComponentTemplate.from(), _reactGenerators().ReactViteTemplate.from(), _reactGenerators().ReactHookTemplate.from(), _reactGenerators().ReactWebpackTemplate.from(),
    // ReactWebpackAppTemplate.from(),
    _reactGenerators().ReactJSComponentTemplate.from(), _reactGenerators().ReactEnvTemplate.from(), _reactGenerators().ThemeTemplate.from()]);
  }

  // apps(): EnvHandler<AppTypeList> {
  //   // TODO: fix issue with two app types on bit.
  //   return AppTypeList.from([
  //     ReactSsrType.from(),
  //     ViteReactType.from(),
  //     ReactAppType.from(),
  //     // createReactViteAppType()
  //     // createReactEsbuildType()
  //   ]);
  // }

  /**
   * configure and control the packaging process of components.
   */
  package() {
    return _pkg().PackageGenerator.from({
      packageJson: this.packageJson,
      npmIgnore: this.npmIgnore
    });
  }
  get types() {
    const packagePath = require.resolve('@teambit/typescript.typescript-compiler');
    const packageRoot = (0, _findRoot().default)(packagePath);
    return [...(0, _typescript2().resolveTypes)(__dirname, [this.tsTypesPath]), ...(0, _typescript2().resolveTypes)(packageRoot, [_typescript2().GLOBAL_TYPES_DIR])];
  }
}
exports.ReactEnv = ReactEnv;
var _default = exports.default = new ReactEnv();

//# sourceMappingURL=react-env.bit-env.js.map
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VitestWorker = void 0;
const worker_1 = require("@teambit/worker");
const vite_esm_packages_vitest_1 = __importDefault(require("@teambit/vite.esm-packages.vitest"));
const watch_reporter_1 = __importDefault(require("./watch-reporter"));
class VitestWorker {
    onTestComplete(onTestComplete) {
        this.onTestCompleteCb = onTestComplete;
    }
    watch(viteConfig) {
        return __awaiter(this, void 0, void 0, function* () {
            const { startVitest } = yield (0, vite_esm_packages_vitest_1.default)();
            // eslint-disable-next-line no-param-reassign
            viteConfig.test.reporters = [
                new watch_reporter_1.default((files, errors) => __awaiter(this, void 0, void 0, function* () {
                    if (this.onTestCompleteCb) {
                        this.onTestCompleteCb(files, errors);
                    }
                }))
            ];
            yield startVitest('test', undefined, undefined, viteConfig);
        });
    }
}
exports.VitestWorker = VitestWorker;
(0, worker_1.expose)(new VitestWorker());
//# sourceMappingURL=vitest.worker.js.map
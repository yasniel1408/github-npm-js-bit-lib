"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VitestTester = void 0;
const fs_extra_1 = require("fs-extra");
const comlink_1 = require("comlink");
const dependency_resolver_1 = require("@teambit/dependency-resolver");
const package_json_1 = __importDefault(require("vitest/package.json"));
const vite_esm_packages_vitest_1 = __importDefault(require("@teambit/vite.esm-packages.vitest"));
const utils_1 = require("./utils");
require.resolve('jsdom');
require.resolve('@vitest/coverage-v8');
class VitestTester {
    constructor(id, configPath, vitestWorker, logger, depResolver, opts = {}) {
        this.id = id;
        this.configPath = configPath;
        this.vitestWorker = vitestWorker;
        this.logger = logger;
        this.depResolver = depResolver;
        this.opts = opts;
        this.displayName = 'Vitest';
    }
    static from(options) {
        const id = options.name || 'vitest-tester';
        return (context) => {
            const logger = context.createLogger(id);
            const worker = context.createWorker(id, require.resolve('./vitest.worker'));
            const depResolver = context.getAspect(dependency_resolver_1.DependencyResolverAspect.id);
            return new VitestTester(id, options.config, worker, logger, depResolver, options);
        };
    }
    version() {
        return package_json_1.default.version;
    }
    displayConfig() {
        return (0, fs_extra_1.readFileSync)(this.configPath, 'utf8');
    }
    onTestRunComplete(callback) {
        return __awaiter(this, void 0, void 0, function* () {
            this.onTestRunCompleteCb = callback;
        });
    }
    test(context) {
        return __awaiter(this, void 0, void 0, function* () {
            const viteConfig = yield (0, utils_1.getConfig)(this.configPath, context, this.depResolver, false);
            const filters = (0, utils_1.patternsToArray)(this.opts, context);
            viteConfig.test.include = filters;
            const { startVitest } = yield (0, vite_esm_packages_vitest_1.default)();
            const vitest = yield startVitest('test', undefined, undefined, viteConfig);
            yield vitest.close();
            const files = vitest.state.getFiles();
            const errors = Array.from(vitest.state.errorsSet);
            const result = (0, utils_1.getResultFromFiles)(files, errors, this.opts, context);
            return result;
        });
    }
    watch(context) {
        return __awaiter(this, void 0, void 0, function* () {
            const viteConfig = yield (0, utils_1.getConfig)(this.configPath, context, this.depResolver, true);
            const filters = (0, utils_1.patternsToArray)(this.opts, context);
            viteConfig.test.include = filters;
            const workerApi = this.vitestWorker.initiate(context.ui
                ? { stdout: true, stderr: true, stdin: true }
                : { stdout: false, stderr: false, stdin: false });
            const onTestCompleteCb = (0, comlink_1.proxy)((files, errors) => {
                if (!this.onTestRunCompleteCb || !files)
                    return;
                const tests = (0, utils_1.getResultFromFiles)(files || [], errors || [], this.opts, context);
                this.onTestRunCompleteCb(tests);
            });
            yield workerApi.onTestComplete(onTestCompleteCb);
            yield workerApi.watch(viteConfig);
            return {};
        });
    }
}
exports.VitestTester = VitestTester;
//# sourceMappingURL=vitest-tester.js.map
import { readFileSync } from 'fs-extra';
import { proxy } from 'comlink';
import { Logger } from '@teambit/logger';
import { HarmonyWorker } from '@teambit/worker';
import { DependencyResolverMain, DependencyResolverAspect } from '@teambit/dependency-resolver';
import {
  Tester,
  CallbackFn,
  TesterContext,
  Tests,
} from '@teambit/tester';
import { EnvContext, EnvHandler } from '@teambit/envs';
import vitestPackageInfo from 'vitest/package.json';
import getVitest from '@teambit/vite.esm-packages.vitest';

import type { VitestWorker } from './vitest.worker';
import { VitestFile, patternsToArray, getConfig, getResultFromFiles } from './utils';
import { VitestOptions, VitestTesterOptions } from './vitest-options';

require.resolve('jsdom');
require.resolve('@vitest/coverage-v8');

export class VitestTester implements Tester {
  constructor(
    readonly id: string,
    readonly configPath: string,
    private vitestWorker: HarmonyWorker<VitestWorker>,
    private logger: Logger,
    private depResolver: DependencyResolverMain,
    private opts: VitestTesterOptions = {}
  ) {}

  static from(options: VitestOptions): EnvHandler<Tester> {
    const id = options.name || 'vitest-tester';
    return (context: EnvContext) => {
      const logger = context.createLogger(id);
      const worker = context.createWorker<VitestWorker>(
        id,
        require.resolve('./vitest.worker')
      );
      const depResolver = context.getAspect<DependencyResolverMain>(DependencyResolverAspect.id);
      return new VitestTester(
        id,
        options.config,
        worker,
        logger,
        depResolver,
        options,
      );
    };
  }

  displayName = 'Vitest';

  version() {
    return vitestPackageInfo.version;
  }

  displayConfig() {
    return readFileSync(this.configPath, 'utf8');
  }

  private onTestRunCompleteCb: CallbackFn | undefined;

  async onTestRunComplete(callback: CallbackFn) {
    this.onTestRunCompleteCb = callback;
  }

  async test(context: TesterContext): Promise<Tests> {
    const viteConfig = await getConfig(this.configPath, context, this.depResolver, false);
    const filters = patternsToArray(this.opts, context);
    viteConfig.test!.include = filters;

    const { startVitest } = await getVitest();
    const vitest = await startVitest('test', undefined, undefined, viteConfig);
    await vitest!.close();

    const files = vitest!.state.getFiles();
    const errors = Array.from(vitest!.state.errorsSet) as Array<Error>;
    const result = getResultFromFiles(files, errors, this.opts, context);
    return result;
  }

  async watch(context: TesterContext): Promise<Tests> {
    const viteConfig = await getConfig(this.configPath, context, this.depResolver, true);
    const filters = patternsToArray(this.opts, context);
    viteConfig.test!.include = filters;

    const workerApi = this.vitestWorker.initiate(
      context.ui
        ? { stdout: true, stderr: true, stdin: true }
        : { stdout: false, stderr: false, stdin: false }
    );

    const onTestCompleteCb = proxy((files?: VitestFile[], errors?: unknown[]) => {
      if (!this.onTestRunCompleteCb || !files) return;
      const tests = getResultFromFiles(files || [], errors || [], this.opts, context);
      this.onTestRunCompleteCb(tests);
    });

    await workerApi.onTestComplete(onTestCompleteCb);
    await workerApi.watch(viteConfig);

    return {} as Tests;
  }
}

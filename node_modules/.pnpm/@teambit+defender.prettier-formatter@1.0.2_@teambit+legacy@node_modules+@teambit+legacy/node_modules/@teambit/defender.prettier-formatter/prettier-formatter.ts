import { AbstractVinyl } from '@teambit/legacy/dist/consumer/component/sources';
import {
  Formatter,
  FormatterContext,
  FormatResults,
  FileFormatResult,
  ComponentFormatResult,
} from '@teambit/formatter';
import PrettierLib, { Options as PrettierModuleOptions } from 'prettier';
import { compact } from 'lodash';
import mapSeries from 'p-map-series';
import { Logger } from '@teambit/logger';
import { EnvContext, EnvHandler, ExecutionContext } from '@teambit/envs';
import { PrettierOptions } from './prettier-options';
import { computePrettierConfig } from './get-prettier-config';

const DEFAULT_EXTENSIONS = [
  '.js',
  '.jsx',
  '.ts',
  '.tsx',
  '.mjs',
  '.cjs',
  '.json',
  '.css',
  '.scss',
  '.md',
  '.mdx',
  '.html',
  '.yml',
  '.yaml',
];

export class PrettierFormatter implements Formatter {
  constructor(
    readonly id: string = 'prettier-formatter',

    private logger: Logger,

    private options: PrettierModuleOptions,

    /**
     * file types to format.
     */
    private extensions: string[] = DEFAULT_EXTENSIONS,

    /**
     * reference to the prettier module.
     */
    private prettierModule = PrettierLib
  ) {}

  // eslint-disable-next-line react/static-property-placement
  displayName = 'Prettier';

  displayConfig() {
    return JSON.stringify(this.options, null, 2);
  }

  async format(context: FormatterContext): Promise<FormatResults> {
    return this.run(context);
  }

  async formatSnippet(snippet: string): Promise<string> {
    return this.prettierModule.format(snippet, this.options);
  }

  async check(context: FormatterContext): Promise<FormatResults> {
    return this.run(context);
  }

  private async run(
    context: FormatterContext & ExecutionContext
  ): Promise<FormatResults> {
    const check = !!context.check;
    const longProcessLogger = this.logger.createLongProcessLogger(
      'formatting components',
      context.components.length
    );
    const resultsP = mapSeries(
      context.components,
      async (component): Promise<ComponentFormatResult> => {
        longProcessLogger.logProgress(component.id.toString());
        const filesP = component.filesystem.files.map(
          async (file): Promise<FileFormatResult | undefined> => {
            if (!this.extensions?.includes(file.extname)) return undefined;
            const sourceCode = file.contents.toString('utf8');
            const optsWithFilePath = this.addFilePathToOpts(this.options, file);
            const checkFormatResults = await this.prettierModule.check(
              sourceCode,
              optsWithFilePath
            );
            const formatResults = await this.prettierModule.format(
              sourceCode,
              optsWithFilePath
            );

            const hasIssues = !checkFormatResults;
            const newContent =
              typeof formatResults === 'string' && hasIssues
                ? formatResults
                : undefined;

            if (!check && newContent) {
              // eslint-disable-next-line no-param-reassign
              file.contents = Buffer.from(newContent);
              await file.write(undefined, true);
            }

            return {
              filePath: file.relative,
              hasIssues,
              newContent,
            };
          }
        );

        const files = await Promise.all(filesP);

        return {
          component,
          results: compact(files),
        };
      }
    );

    const results = await resultsP;

    return {
      results,
      errors: [],
    };
  }

  private addFilePathToOpts(
    options: PrettierModuleOptions,
    file: AbstractVinyl
  ): PrettierModuleOptions {
    return { ...options, filepath: file.path };
  }

  version() {
    return this.prettierModule.version;
  }

  static from(options: PrettierOptions): EnvHandler<Formatter> {
    return (context: EnvContext) => {
      const name = options.name || 'prettier-formatter';
      const logger = context.createLogger(name);
      const prettierConfig = computePrettierConfig(options);

      return new PrettierFormatter(
        name,
        logger,
        prettierConfig,
        options.extensions,
        options.prettier || PrettierLib
      );
    };
  }
}
